@page "/ecology"
@using System.Net.Http.Json
@using OpenEcologyApp.Data
@inject HttpClient Http

<h3>📊 Данные по экологии</h3>

<input class="form-control mb-2" placeholder="🔍 Поиск по региону..." value="@searchTerm" @oninput="OnSearchChanged" />

<select class="form-select mb-3" value="@sortBy" @onchange="OnSortChanged">
    <option value="date">Сортировать по дате</option>
    <option value="co2">Сортировать по CO2</option>
</select>

@if (data == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Регион</th>
                <th>CO₂</th>
                <th>Дата</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in data)
            {
                <tr>
                    <td>@item.Region</td>
                    <td>@item.CO2Level</td>
                    <td>@item.Date.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between">
        <button class="btn btn-secondary" @onclick="PrevPage" disabled="@(_page <= 1)">⬅️ Назад</button>
        <span>Страница @_page</span>
        <button class="btn btn-secondary" @onclick="NextPage">Вперёд ➡️</button>
    </div>

}

@code {
    private List<EcologyData>? data;
    private int _page = 1;
    private int _pageSize = 5;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private string searchTerm = "";
    private string sortBy = "date";

    private async Task LoadData()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<EcologyData>>($"api/ecology/{_page}/{_pageSize}") ?? new();

            // 🔍 Фильтрация
            if (!string.IsNullOrWhiteSpace(searchTerm))
                result = result.Where(e => e.Region.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

            // Сортировка
            result = sortBy switch
            {
                "co2" => result.OrderByDescending(e => e.CO2Level).ToList(),
                _ => result.OrderByDescending(e => e.Date).ToList()
            };

            data = result;
        }
        catch
        {
            data = new();
        }
    }

    private async Task NextPage()
    {
        _page++;
        await LoadData();
    }

    private async Task PrevPage()
    {
        if (_page > 1)
        {
            _page--;
            await LoadData();
        }
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        await LoadData();
    }

    private async Task OnSortChanged(ChangeEventArgs e)
    {
        sortBy = e.Value?.ToString() ?? "date";
        await LoadData();
    }
}
